import asyncio

class Client():
    
    def __init__(self, loop):
        self.loop = loop
        self.connection= None
    
    @asyncio.coroutine
    def try_to_connect(self, ip, port):
        print("I'm trying")
        try:
            self.connection = yield from asyncio.async(self.loop.create_connection(lambda: ClientConnection(self, self.loop), ip, port))
        except ConnectionRefusedError as e:
            print("Can't connect: {}".format(e))
        else:
            print("Connection is sucessfull")

class ClientConnection(asyncio.Protocol):
    
    master = None
    
    def __init__(self, master, loop):
        self.master = master
        self.loop = loop
        
    def connection_made(self, transport):
        print('Connected!')

    def data_received(self, data):
        print('Data received: {!r}'.format(data.decode()))

    def connection_lost(self, exc):
        self.master.connection = None
        print('The server closed the connection')

loop = asyncio.get_event_loop()
c = Client(loop)
c.try_to_connec
loop.run_forever()
